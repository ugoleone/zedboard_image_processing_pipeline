-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity contatore_no_io is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    led_output_V : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of contatore_no_io is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "contatore_no_io,hls_ip_2018_3_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.794000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=34,HLS_SYN_LUT=89,HLS_VERSION=2018_3_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_16E35FF : STD_LOGIC_VECTOR (31 downto 0) := "00000001011011100011010111111111";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal counter_value : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal led_status_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_phi_mux_counter_value_new_phi_fu_40_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_fu_68_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal counter_value_assign_fu_61_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_fu_79_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_led_status_V_loc_phi_fu_50_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                counter_value <= ap_phi_mux_counter_value_new_phi_fu_40_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_68_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                led_status_V <= val_assign_fu_79_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_phi_mux_counter_value_new_phi_fu_40_p4_assign_proc : process(ap_CS_fsm_state1, tmp_fu_68_p2, counter_value_assign_fu_61_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((tmp_fu_68_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_counter_value_new_phi_fu_40_p4 <= counter_value_assign_fu_61_p2;
            elsif ((tmp_fu_68_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_counter_value_new_phi_fu_40_p4 <= ap_const_lv32_0;
            else 
                ap_phi_mux_counter_value_new_phi_fu_40_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_counter_value_new_phi_fu_40_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_led_status_V_loc_phi_fu_50_p4_assign_proc : process(led_status_V, ap_CS_fsm_state1, tmp_fu_68_p2, val_assign_fu_79_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((tmp_fu_68_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_led_status_V_loc_phi_fu_50_p4 <= led_status_V;
            elsif ((tmp_fu_68_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_led_status_V_loc_phi_fu_50_p4 <= val_assign_fu_79_p2;
            else 
                ap_phi_mux_led_status_V_loc_phi_fu_50_p4 <= "X";
            end if;
        else 
            ap_phi_mux_led_status_V_loc_phi_fu_50_p4 <= "X";
        end if; 
    end process;

    counter_value_assign_fu_61_p2 <= std_logic_vector(unsigned(counter_value) + unsigned(ap_const_lv32_1));
    led_output_V <= ap_phi_mux_led_status_V_loc_phi_fu_50_p4;
    tmp_fu_68_p2 <= "1" when (unsigned(counter_value_assign_fu_61_p2) > unsigned(ap_const_lv32_16E35FF)) else "0";
    val_assign_fu_79_p2 <= (led_status_V xor ap_const_lv1_1);
end behav;
