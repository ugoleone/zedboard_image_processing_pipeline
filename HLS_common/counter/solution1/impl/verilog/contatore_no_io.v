// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="contatore_no_io,hls_ip_2018_3_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.794000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=34,HLS_SYN_LUT=89,HLS_VERSION=2018_3_1}" *)

module contatore_no_io (
        ap_clk,
        ap_rst,
        led_output_V
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
output  [0:0] led_output_V;

reg   [31:0] counter_value;
reg   [0:0] led_status_V;
reg   [31:0] ap_phi_mux_counter_value_new_phi_fu_40_p4;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_fu_68_p2;
wire   [31:0] counter_value_assign_fu_61_p2;
wire   [0:0] val_assign_fu_79_p2;
reg   [0:0] ap_phi_mux_led_status_V_loc_phi_fu_50_p4;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 counter_value = 32'd0;
#0 led_status_V = 1'd0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        counter_value <= ap_phi_mux_counter_value_new_phi_fu_40_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_68_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        led_status_V <= val_assign_fu_79_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((tmp_fu_68_p2 == 1'd0)) begin
            ap_phi_mux_counter_value_new_phi_fu_40_p4 = counter_value_assign_fu_61_p2;
        end else if ((tmp_fu_68_p2 == 1'd1)) begin
            ap_phi_mux_counter_value_new_phi_fu_40_p4 = 32'd0;
        end else begin
            ap_phi_mux_counter_value_new_phi_fu_40_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_counter_value_new_phi_fu_40_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((tmp_fu_68_p2 == 1'd0)) begin
            ap_phi_mux_led_status_V_loc_phi_fu_50_p4 = led_status_V;
        end else if ((tmp_fu_68_p2 == 1'd1)) begin
            ap_phi_mux_led_status_V_loc_phi_fu_50_p4 = val_assign_fu_79_p2;
        end else begin
            ap_phi_mux_led_status_V_loc_phi_fu_50_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_led_status_V_loc_phi_fu_50_p4 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign counter_value_assign_fu_61_p2 = (counter_value + 32'd1);

assign led_output_V = ap_phi_mux_led_status_V_loc_phi_fu_50_p4;

assign tmp_fu_68_p2 = ((counter_value_assign_fu_61_p2 > 32'd23999999) ? 1'b1 : 1'b0);

assign val_assign_fu_79_p2 = (led_status_V ^ 1'd1);

endmodule //contatore_no_io
